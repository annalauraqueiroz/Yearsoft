/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package componentes;

import java.awt.Color;
import java.awt.Cursor;
import javax.swing.JLabel;

/**
 *
 * @author natan
 */
public class ButtonToolBar extends JLabel {

    /**
     * Creates new form ButtonToolBar
     */
    
    /* Indica se o botão está pressionado no momento (true) ou não (false). */
    private boolean pressedMouse = false;
    private boolean selected;
    
    public ButtonToolBar() {
        initComponents();
    }

    /** Possibilita a definição do botão como estando pressionado ou não, modificando seu visual */
    public void setPressed(boolean valor){
        if(valor){
            this.setBackground(new Color(91,148,150));
            this.setForeground(new Color(252,255,245));
            selected = true;
        }else{
            this.setBackground(new Color(154,192,186));
            this.setForeground(new Color(10,24,39));
            selected = false;
        }
    }
    
    public boolean getPressedMouse(){
        return pressedMouse;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(154, 192, 186));
        setFont(new java.awt.Font("Open Sans", 0, 20)); // NOI18N
        setForeground(new java.awt.Color(10, 24, 39));
        setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setText("ButtonToolBar");
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(10, 24, 39), 2));
        setOpaque(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents
    
    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.setBackground(new Color(91,148,150));
        this.setForeground(new Color(252,255,245));
        this.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        // Caso o botão esteja selecionado (selected), o mesmo não mudará de cor com a saída do mouse
        if(!selected){
            this.setBackground(new Color(154,192,186));
            this.setForeground(new Color(10,24,39));
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        this.pressedMouse = false;
    }//GEN-LAST:event_formMouseExited

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.pressedMouse = true;
        // O evento 'action' do botão será o evento MouseReleased, com a checagem do estado de 'pressedMouse'
        // True - action ; False - non action
    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
